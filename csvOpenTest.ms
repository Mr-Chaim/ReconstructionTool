global sizeObPlane = 50
delete cameras
centralOBJ = #()
global positions = #([250,0,100],[-250,0,100],[0,250,100],[0,-250,100],[250,0,0],[0,250,0],[-250,0,0],[0,-250,0],[0,0,400],[0,0,-400],[250,0,-100],[-250,0,-100],[0,250,-100],[0,-250,-100])
for CAM=1 to 9 do
(
global NewCamera = targetcamera()
newcamera.name = ("targetCamera_" + (CAM as string))
newcamera.type = #free
newcamera.type = #target
newCamera.target.pos = [0,0,0]
NewCamera.pos = positions[CAM]
)
c=1
for c=1 to cameras.count do
	(
		
		vertDeleteArray = #()
		if classof cameras[c] != Targetobject do
		(
			--a = line()
			global centralOBJ = sphere()
			centralObj.segs = 4
			centralOBJ.name = ("centralObj_" + (c as string))
			centralOBJ.radius = 0.1
			convertTo centralOBJ editable_poly
			--setnumverts centralOBJ 5000
			j=1
			global r = ray [0,0,0] [0,0,1]
			global distanceofCamera = distance cameras[c] cameras[c].target
			global angleFOVTAN = tan (cameras[c].fov/2)
			global angleFOVTANSmall = tan ((cameras[c].fov/1.3)/2)
			global currentTarget = cameras[c].targetDistance 
			global currentTargetPos = cameras[c].target.pos
			global ShortDistance = cameras[c].targetDistance = 0.01
			global ShortDistancePos = cameras[c].target.pos
			global cameraDir = cameras[c].dir
			cameras[c].targetDistance = currentTarget
			fn baseplaneFN = ---------------------------------------------------------This function will create a baseplane to serve as stopper for particles that did not collide with any other objects.
			(
				global baseplane = plane()
				baseplane.name =  "particlebaseplane"	
				baseplane.width = (distanceofCamera * angleFOVTAN) *2
				baseplane.length = (distanceofCamera * angleFOVTANSmall) *2
				baseplane.widthsegs = sizeObPlane 
				baseplane.lengthsegs = sizeObPlane
				convertTo baseplane editable_poly
				global numofverts = polyop.getnumverts baseplane
				baseplane.pivot = baseplane.center
				baseplane.pos = currentTargetPos
				baseplane.dir = cameraDir
			)
			fn raySourcePlane = -------------------------------------------------This function will serve as a source of the particles, it will be above the object located 20 units of distance over the object
			(
				global topPlane = plane()
				topPlane.name = "particleTopPlane"
				topPlane.width = (ShortDistance * angleFOVTAN) *2
				topPlane.length = (ShortDistance * angleFOVTANSmall) *2
				topPlane.lengthsegs = sizeObPlane
				topPlane.widthsegs = sizeObPlane 
				global lenghtsegments = topplane.lengthsegs
				global sideSegments = topplane.widthsegs
				topPlane.pivot = topplane.center
				topPlane.pos = ShortDistancePos
				topPlane.dir = cameraDir
				convertTo topPlane editable_poly
			)
			baseplaneFN()
			raysourceplane()
			csvFile = openfile (@"C:\CSVFiles\rayDistanceTestView" + (c as string)+ ".csv")
			splineN = 2
			testline = 0
			while eof csvfile != true do
			(
				splineN = 2
				lineX = readline csvFile
				linestringArray = filterstring linex ","
				for w=1 to linestringArray.count do
				(
					h = linestringArray[w] as float
					if h!=0.0 then
					(
						alphaX = ((polyop.getvert baseplane j)[1])-((polyop.getvert topPlane j)[1])
						alphaY = ((polyop.getvert baseplane j)[2])-((polyop.getvert topPlane j)[2])
						alphaZ = ((polyop.getvert baseplane j)[3])-((polyop.getvert topPlane j)[3])
						dFloor = sqrt((alphax*alphax)+(alphay*alphay))
						dZ = sqrt((dFloor*dFloor)+(alphaz*alphaz))
						cosFloor =  alphax /dfloor
						sinFloor = alphaY/dfloor
						angleFloor = acos cosFloor
						sinFinal =  alphaZ/dz
						cosfinal = dfloor/dz
						NW = h * cosfinal
						x =((polyop.getvert topplane j)[1]) + NW * cosfloor
						y =((polyop.getvert topplane j)[2]) + NW * sinfloor
						z =((polyop.getvert topplane j)[3]) + h * sinfinal
						--polyop.setVert baseplane j [x,y,z]
						/*if splineN == 2 then
						(
							addnewspline a
							testLine +=1
							addknot a testLine #corner #curve [x,y,z]
						)
						else 
						(
							addknot a testLine #corner #curve [x,y,z]
						)*/
						newbox = box()
						newbox.height = 250/sizeObPlane
						newbox.length = 250/sizeObPlane
						newbox.width = 250/sizeObPlane
						newbox.lengthsegs = 1
						newbox.widthsegs = 1
						newbox.heightsegs = 1
						newbox.pos = [x,y,z]
						polyop.attach centralOBJ newbox 
						splineN = 1
					)
					else 
					(
						splineN = 2
					)
					j+=1
					clearUndoBuffer()
				)
				--update centralOBJ
			)
			--polyop.deleteVerts baseplane vertDeleteArray  
			--updateshape a
			close csvFile
			free csvfile
			delete baseplane
			delete topPlane
			gc()
		)
	)
	delete cameras
gc()